// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: weatherlink.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWeatherlinkStation = `-- name: CreateWeatherlinkStation :one
INSERT INTO weatherlink (
  station_id,
  uuid,
  api_key,
  api_secret
) VALUES (
  $1, $2, $3, $4
) RETURNING id, station_id, uuid, api_key, api_secret, created_at, updated_at, deleted_at
`

type CreateWeatherlinkStationParams struct {
	StationID int64       `json:"station_id"`
	Uuid      pgtype.Text `json:"uuid"`
	ApiKey    pgtype.Text `json:"api_key"`
	ApiSecret pgtype.Text `json:"api_secret"`
}

func (q *Queries) CreateWeatherlinkStation(ctx context.Context, arg CreateWeatherlinkStationParams) (Weatherlink, error) {
	row := q.db.QueryRow(ctx, createWeatherlinkStation,
		arg.StationID,
		arg.Uuid,
		arg.ApiKey,
		arg.ApiSecret,
	)
	var i Weatherlink
	err := row.Scan(
		&i.ID,
		&i.StationID,
		&i.Uuid,
		&i.ApiKey,
		&i.ApiSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listWeatherlinkStations = `-- name: ListWeatherlinkStations :many
SELECT id, station_id, uuid, api_key, api_secret, created_at, updated_at, deleted_at FROM weatherlink
WHERE
  uuid IS NOT NULL OR (api_key IS NOT NULL AND api_secret IS NOT NULL)
ORDER BY id
LIMIT $2
OFFSET $1
`

type ListWeatherlinkStationsParams struct {
	Offset int32       `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) ListWeatherlinkStations(ctx context.Context, arg ListWeatherlinkStationsParams) ([]Weatherlink, error) {
	rows, err := q.db.Query(ctx, listWeatherlinkStations, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Weatherlink{}
	for rows.Next() {
		var i Weatherlink
		if err := rows.Scan(
			&i.ID,
			&i.StationID,
			&i.Uuid,
			&i.ApiKey,
			&i.ApiSecret,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
