// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sim_access_token.sql

package db

import (
	"context"
)

const createSimAccessToken = `-- name: CreateSimAccessToken :one
INSERT INTO sim_access_tokens (
  access_token,
  type,
  mobile_number
) VALUES (
  $1, $2, $3
) RETURNING access_token, type, mobile_number, created_at, updated_at
`

type CreateSimAccessTokenParams struct {
	AccessToken  string `json:"access_token"`
	Type         string `json:"type"`
	MobileNumber string `json:"mobile_number"`
}

func (q *Queries) CreateSimAccessToken(ctx context.Context, arg CreateSimAccessTokenParams) (SimAccessToken, error) {
	row := q.db.QueryRow(ctx, createSimAccessToken, arg.AccessToken, arg.Type, arg.MobileNumber)
	var i SimAccessToken
	err := row.Scan(
		&i.AccessToken,
		&i.Type,
		&i.MobileNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSimAccessToken = `-- name: DeleteSimAccessToken :exec
DELETE FROM sim_access_tokens WHERE access_token = $1
`

func (q *Queries) DeleteSimAccessToken(ctx context.Context, accessToken string) error {
	_, err := q.db.Exec(ctx, deleteSimAccessToken, accessToken)
	return err
}

const getSimAccessToken = `-- name: GetSimAccessToken :one
SELECT access_token, type, mobile_number, created_at, updated_at FROM sim_access_tokens
WHERE access_token = $1 LIMIT 1
`

func (q *Queries) GetSimAccessToken(ctx context.Context, accessToken string) (SimAccessToken, error) {
	row := q.db.QueryRow(ctx, getSimAccessToken, accessToken)
	var i SimAccessToken
	err := row.Scan(
		&i.AccessToken,
		&i.Type,
		&i.MobileNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
