// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lufft.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countLufftStationMsg = `-- name: CountLufftStationMsg :one
SELECT count(*) FROM observations_stationhealth h
WHERE h.station_id = $1
`

func (q *Queries) CountLufftStationMsg(ctx context.Context, stationID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countLufftStationMsg, stationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listLufftStationMsg = `-- name: ListLufftStationMsg :many
SELECT h.timestamp, h.message FROM observations_stationhealth h
WHERE h.station_id = $1
ORDER BY h.id
LIMIT $2
OFFSET $3
`

type ListLufftStationMsgParams struct {
	StationID int64 `json:"station_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type ListLufftStationMsgRow struct {
	Timestamp pgtype.Timestamptz `json:"timestamp"`
	Message   pgtype.Text        `json:"message"`
}

func (q *Queries) ListLufftStationMsg(ctx context.Context, arg ListLufftStationMsgParams) ([]ListLufftStationMsgRow, error) {
	rows, err := q.db.Query(ctx, listLufftStationMsg, arg.StationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLufftStationMsgRow{}
	for rows.Next() {
		var i ListLufftStationMsgRow
		if err := rows.Scan(&i.Timestamp, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
