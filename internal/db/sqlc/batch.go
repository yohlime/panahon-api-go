// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchCreateUserRoles = `-- name: BatchCreateUserRoles :batchone
INSERT INTO role_user (user_id, role_id)
SELECT u.id, r.id
FROM (
	VALUES
		($1::text, $2::text)
) ru (username, role_name)
JOIN users u USING(username)
JOIN roles r ON ru.role_name = r.name
RETURNING role_id, user_id, created_at, updated_at
`

type BatchCreateUserRolesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchCreateUserRolesParams struct {
	Username string `json:"username"`
	RoleName string `json:"role_name"`
}

func (q *Queries) BatchCreateUserRoles(ctx context.Context, arg []BatchCreateUserRolesParams) *BatchCreateUserRolesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Username,
			a.RoleName,
		}
		batch.Queue(batchCreateUserRoles, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchCreateUserRolesBatchResults{br, len(arg), false}
}

func (b *BatchCreateUserRolesBatchResults) QueryRow(f func(int, RoleUser, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i RoleUser
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.RoleID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *BatchCreateUserRolesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchDeleteUserRoles = `-- name: BatchDeleteUserRoles :batchexec
DELETE FROM role_user AS ru
USING
	users AS u,
	roles AS r
WHERE 
	u.id = ru.user_id
	AND r.id = ru.role_id
	AND u.username = $1::text
	AND r.name = $2::text
`

type BatchDeleteUserRolesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchDeleteUserRolesParams struct {
	Username string `json:"username"`
	RoleName string `json:"role_name"`
}

func (q *Queries) BatchDeleteUserRoles(ctx context.Context, arg []BatchDeleteUserRolesParams) *BatchDeleteUserRolesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Username,
			a.RoleName,
		}
		batch.Queue(batchDeleteUserRoles, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchDeleteUserRolesBatchResults{br, len(arg), false}
}

func (b *BatchDeleteUserRolesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchDeleteUserRolesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
