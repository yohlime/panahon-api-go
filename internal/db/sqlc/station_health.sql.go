// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: station_health.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStationHealth = `-- name: CreateStationHealth :one
INSERT INTO observations_stationhealth (
  vb1,
  vb2,
  curr,
  bp1,
  bp2,
  cm,
  ss,
  temp_arq,
  rh_arq,
  fpm,
  error_msg,
  message,
  data_count,
  data_status,
  timestamp,
  minutes_difference,
  station_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17
) RETURNING id, vb1, vb2, curr, bp1, bp2, cm, ss, temp_arq, rh_arq, fpm, error_msg, message, data_count, data_status, timestamp, station_id, minutes_difference, created_at, updated_at
`

type CreateStationHealthParams struct {
	Vb1               pgtype.Float4      `json:"vb1"`
	Vb2               pgtype.Float4      `json:"vb2"`
	Curr              pgtype.Float4      `json:"curr"`
	Bp1               pgtype.Float4      `json:"bp1"`
	Bp2               pgtype.Float4      `json:"bp2"`
	Cm                pgtype.Text        `json:"cm"`
	Ss                pgtype.Int4        `json:"ss"`
	TempArq           pgtype.Float4      `json:"temp_arq"`
	RhArq             pgtype.Float4      `json:"rh_arq"`
	Fpm               pgtype.Text        `json:"fpm"`
	ErrorMsg          pgtype.Text        `json:"error_msg"`
	Message           pgtype.Text        `json:"message"`
	DataCount         pgtype.Int4        `json:"data_count"`
	DataStatus        pgtype.Text        `json:"data_status"`
	Timestamp         pgtype.Timestamptz `json:"timestamp"`
	MinutesDifference pgtype.Int4        `json:"minutes_difference"`
	StationID         int64              `json:"station_id"`
}

func (q *Queries) CreateStationHealth(ctx context.Context, arg CreateStationHealthParams) (ObservationsStationhealth, error) {
	row := q.db.QueryRow(ctx, createStationHealth,
		arg.Vb1,
		arg.Vb2,
		arg.Curr,
		arg.Bp1,
		arg.Bp2,
		arg.Cm,
		arg.Ss,
		arg.TempArq,
		arg.RhArq,
		arg.Fpm,
		arg.ErrorMsg,
		arg.Message,
		arg.DataCount,
		arg.DataStatus,
		arg.Timestamp,
		arg.MinutesDifference,
		arg.StationID,
	)
	var i ObservationsStationhealth
	err := row.Scan(
		&i.ID,
		&i.Vb1,
		&i.Vb2,
		&i.Curr,
		&i.Bp1,
		&i.Bp2,
		&i.Cm,
		&i.Ss,
		&i.TempArq,
		&i.RhArq,
		&i.Fpm,
		&i.ErrorMsg,
		&i.Message,
		&i.DataCount,
		&i.DataStatus,
		&i.Timestamp,
		&i.StationID,
		&i.MinutesDifference,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStationHealth = `-- name: DeleteStationHealth :exec
DELETE FROM observations_stationhealth WHERE station_id = $1 AND id = $2
`

type DeleteStationHealthParams struct {
	StationID int64 `json:"station_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteStationHealth(ctx context.Context, arg DeleteStationHealthParams) error {
	_, err := q.db.Exec(ctx, deleteStationHealth, arg.StationID, arg.ID)
	return err
}

const getStationHealth = `-- name: GetStationHealth :one
SELECT id, vb1, vb2, curr, bp1, bp2, cm, ss, temp_arq, rh_arq, fpm, error_msg, message, data_count, data_status, timestamp, station_id, minutes_difference, created_at, updated_at FROM observations_stationhealth
WHERE station_id = $1 AND id = $2 LIMIT 1
`

type GetStationHealthParams struct {
	StationID int64 `json:"station_id"`
	ID        int64 `json:"id"`
}

func (q *Queries) GetStationHealth(ctx context.Context, arg GetStationHealthParams) (ObservationsStationhealth, error) {
	row := q.db.QueryRow(ctx, getStationHealth, arg.StationID, arg.ID)
	var i ObservationsStationhealth
	err := row.Scan(
		&i.ID,
		&i.Vb1,
		&i.Vb2,
		&i.Curr,
		&i.Bp1,
		&i.Bp2,
		&i.Cm,
		&i.Ss,
		&i.TempArq,
		&i.RhArq,
		&i.Fpm,
		&i.ErrorMsg,
		&i.Message,
		&i.DataCount,
		&i.DataStatus,
		&i.Timestamp,
		&i.StationID,
		&i.MinutesDifference,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStationHealths = `-- name: ListStationHealths :many
SELECT id, vb1, vb2, curr, bp1, bp2, cm, ss, temp_arq, rh_arq, fpm, error_msg, message, data_count, data_status, timestamp, station_id, minutes_difference, created_at, updated_at FROM observations_stationhealth
WHERE station_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListStationHealthsParams struct {
	StationID int64 `json:"station_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListStationHealths(ctx context.Context, arg ListStationHealthsParams) ([]ObservationsStationhealth, error) {
	rows, err := q.db.Query(ctx, listStationHealths, arg.StationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ObservationsStationhealth{}
	for rows.Next() {
		var i ObservationsStationhealth
		if err := rows.Scan(
			&i.ID,
			&i.Vb1,
			&i.Vb2,
			&i.Curr,
			&i.Bp1,
			&i.Bp2,
			&i.Cm,
			&i.Ss,
			&i.TempArq,
			&i.RhArq,
			&i.Fpm,
			&i.ErrorMsg,
			&i.Message,
			&i.DataCount,
			&i.DataStatus,
			&i.Timestamp,
			&i.StationID,
			&i.MinutesDifference,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStationHealth = `-- name: UpdateStationHealth :one
UPDATE observations_stationhealth
SET
  vb1 = COALESCE($1, vb1),
  vb2 = COALESCE($2, vb2),
  curr = COALESCE($3, curr),
  bp1 = COALESCE($4, bp1),
  bp2 = COALESCE($5, bp2),
  cm = COALESCE($6, cm),
  ss = COALESCE($7, ss),
  temp_arq = COALESCE($8, temp_arq),
  rh_arq = COALESCE($9, rh_arq),
  fpm = COALESCE($10, fpm),
  error_msg = COALESCE($11, error_msg),
  message = COALESCE($12, message),
  data_count = COALESCE($13, data_count),
  data_status = COALESCE($14, data_status),
  timestamp = COALESCE($15, timestamp),
  minutes_difference = COALESCE($16, minutes_difference),
  updated_at = now()
WHERE station_id = $17 AND id = $18
RETURNING id, vb1, vb2, curr, bp1, bp2, cm, ss, temp_arq, rh_arq, fpm, error_msg, message, data_count, data_status, timestamp, station_id, minutes_difference, created_at, updated_at
`

type UpdateStationHealthParams struct {
	Vb1               pgtype.Float4      `json:"vb1"`
	Vb2               pgtype.Float4      `json:"vb2"`
	Curr              pgtype.Float4      `json:"curr"`
	Bp1               pgtype.Float4      `json:"bp1"`
	Bp2               pgtype.Float4      `json:"bp2"`
	Cm                pgtype.Text        `json:"cm"`
	Ss                pgtype.Int4        `json:"ss"`
	TempArq           pgtype.Float4      `json:"temp_arq"`
	RhArq             pgtype.Float4      `json:"rh_arq"`
	Fpm               pgtype.Text        `json:"fpm"`
	ErrorMsg          pgtype.Text        `json:"error_msg"`
	Message           pgtype.Text        `json:"message"`
	DataCount         pgtype.Int4        `json:"data_count"`
	DataStatus        pgtype.Text        `json:"data_status"`
	Timestamp         pgtype.Timestamptz `json:"timestamp"`
	MinutesDifference pgtype.Int4        `json:"minutes_difference"`
	StationID         int64              `json:"station_id"`
	ID                int64              `json:"id"`
}

func (q *Queries) UpdateStationHealth(ctx context.Context, arg UpdateStationHealthParams) (ObservationsStationhealth, error) {
	row := q.db.QueryRow(ctx, updateStationHealth,
		arg.Vb1,
		arg.Vb2,
		arg.Curr,
		arg.Bp1,
		arg.Bp2,
		arg.Cm,
		arg.Ss,
		arg.TempArq,
		arg.RhArq,
		arg.Fpm,
		arg.ErrorMsg,
		arg.Message,
		arg.DataCount,
		arg.DataStatus,
		arg.Timestamp,
		arg.MinutesDifference,
		arg.StationID,
		arg.ID,
	)
	var i ObservationsStationhealth
	err := row.Scan(
		&i.ID,
		&i.Vb1,
		&i.Vb2,
		&i.Curr,
		&i.Bp1,
		&i.Bp2,
		&i.Cm,
		&i.Ss,
		&i.TempArq,
		&i.RhArq,
		&i.Fpm,
		&i.ErrorMsg,
		&i.Message,
		&i.DataCount,
		&i.DataStatus,
		&i.Timestamp,
		&i.StationID,
		&i.MinutesDifference,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
