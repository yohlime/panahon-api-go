// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocktoken

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	token "github.com/emiliogozo/panahon-api-go/internal/token"
)

// MockMaker is an autogenerated mock type for the Maker type
type MockMaker struct {
	mock.Mock
}

type MockMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaker) EXPECT() *MockMaker_Expecter {
	return &MockMaker_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with given fields: user, duration
func (_m *MockMaker) CreateToken(user token.User, duration time.Duration) (string, *token.Payload, error) {
	ret := _m.Called(user, duration)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 *token.Payload
	var r2 error
	if rf, ok := ret.Get(0).(func(token.User, time.Duration) (string, *token.Payload, error)); ok {
		return rf(user, duration)
	}
	if rf, ok := ret.Get(0).(func(token.User, time.Duration) string); ok {
		r0 = rf(user, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(token.User, time.Duration) *token.Payload); ok {
		r1 = rf(user, duration)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*token.Payload)
		}
	}

	if rf, ok := ret.Get(2).(func(token.User, time.Duration) error); ok {
		r2 = rf(user, duration)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMaker_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockMaker_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - user token.User
//   - duration time.Duration
func (_e *MockMaker_Expecter) CreateToken(user interface{}, duration interface{}) *MockMaker_CreateToken_Call {
	return &MockMaker_CreateToken_Call{Call: _e.mock.On("CreateToken", user, duration)}
}

func (_c *MockMaker_CreateToken_Call) Run(run func(user token.User, duration time.Duration)) *MockMaker_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(token.User), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockMaker_CreateToken_Call) Return(_a0 string, _a1 *token.Payload, _a2 error) *MockMaker_CreateToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMaker_CreateToken_Call) RunAndReturn(run func(token.User, time.Duration) (string, *token.Payload, error)) *MockMaker_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: _a0
func (_m *MockMaker) VerifyToken(_a0 string) (*token.Payload, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *token.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*token.Payload, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *token.Payload); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.Payload)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaker_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockMaker_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - _a0 string
func (_e *MockMaker_Expecter) VerifyToken(_a0 interface{}) *MockMaker_VerifyToken_Call {
	return &MockMaker_VerifyToken_Call{Call: _e.mock.On("VerifyToken", _a0)}
}

func (_c *MockMaker_VerifyToken_Call) Run(run func(_a0 string)) *MockMaker_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMaker_VerifyToken_Call) Return(_a0 *token.Payload, _a1 error) *MockMaker_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaker_VerifyToken_Call) RunAndReturn(run func(string) (*token.Payload, error)) *MockMaker_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMaker creates a new instance of MockMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaker {
	mock := &MockMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
