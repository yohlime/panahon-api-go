// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocksensor

import (
	sensor "github.com/emiliogozo/panahon-api-go/internal/sensor"
	mock "github.com/stretchr/testify/mock"
)

// MockDavisSensor is an autogenerated mock type for the DavisSensor type
type MockDavisSensor struct {
	mock.Mock
}

type MockDavisSensor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDavisSensor) EXPECT() *MockDavisSensor_Expecter {
	return &MockDavisSensor_Expecter{mock: &_m.Mock}
}

// FetchLatest provides a mock function with no fields
func (_m *MockDavisSensor) FetchLatest() ([]sensor.DavisCurrentObservation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchLatest")
	}

	var r0 []sensor.DavisCurrentObservation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]sensor.DavisCurrentObservation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []sensor.DavisCurrentObservation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sensor.DavisCurrentObservation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDavisSensor_FetchLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLatest'
type MockDavisSensor_FetchLatest_Call struct {
	*mock.Call
}

// FetchLatest is a helper method to define mock.On call
func (_e *MockDavisSensor_Expecter) FetchLatest() *MockDavisSensor_FetchLatest_Call {
	return &MockDavisSensor_FetchLatest_Call{Call: _e.mock.On("FetchLatest")}
}

func (_c *MockDavisSensor_FetchLatest_Call) Run(run func()) *MockDavisSensor_FetchLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDavisSensor_FetchLatest_Call) Return(_a0 []sensor.DavisCurrentObservation, _a1 error) *MockDavisSensor_FetchLatest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDavisSensor_FetchLatest_Call) RunAndReturn(run func() ([]sensor.DavisCurrentObservation, error)) *MockDavisSensor_FetchLatest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDavisSensor creates a new instance of MockDavisSensor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDavisSensor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDavisSensor {
	mock := &MockDavisSensor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
